#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app'),
  debug = require('debug')('file-system-boilerplate:server'),
  http = require('http'),
  Mongoose = require('mongoose');

/**
 * Get port from environment and store in Express.
 */

  serverPort = normalizePort(process.env.PORT || '3000'),
  dbPort = normalizePort(process.env.DB_PORT || '27017');

/**
 * Connect to DB, create HTTP server.
 */
_dbInit();
Mongoose.connection.on('connected', _httpInit);

function _dbInit() {
  const
    path = [
      'mongodb://',
      process.env.DB_HOST, ':',
      dbPort
    ].join(''),
    options = {
      dbName: process.env.DB_NAME,
      useNewUrlParser: true
    };

  // Connect to dataset
  Mongoose.connect(
    path, options,
    (err) => {
      if (err) {
        process.exit(1);
        throw new Error('Database failed to connect');
      }
    }
  );
}

function _httpInit(done) {
  server = http.createServer(app);

  // Listen on provided port, on all network interfaces.
  app.set('port', serverPort);

  server.listen(serverPort);

  server.on('error', onError);
  server.on('listening', onListening);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
